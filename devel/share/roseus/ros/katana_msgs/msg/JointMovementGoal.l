;; Auto-generated. Do not edit!


(when (boundp 'katana_msgs::JointMovementGoal)
  (if (not (find-package "KATANA_MSGS"))
    (make-package "KATANA_MSGS"))
  (shadow 'JointMovementGoal (find-package "KATANA_MSGS")))
(unless (find-package "KATANA_MSGS::JOINTMOVEMENTGOAL")
  (make-package "KATANA_MSGS::JOINTMOVEMENTGOAL"))

(in-package "ROS")
;;//! \htmlinclude JointMovementGoal.msg.html
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))


(defclass katana_msgs::JointMovementGoal
  :super ros::object
  :slots (_jointGoal ))

(defmethod katana_msgs::JointMovementGoal
  (:init
   (&key
    ((:jointGoal __jointGoal) (instance sensor_msgs::JointState :init))
    )
   (send-super :init)
   (setq _jointGoal __jointGoal)
   self)
  (:jointGoal
   (&rest __jointGoal)
   (if (keywordp (car __jointGoal))
       (send* _jointGoal __jointGoal)
     (progn
       (if __jointGoal (setq _jointGoal (car __jointGoal)))
       _jointGoal)))
  (:serialization-length
   ()
   (+
    ;; sensor_msgs/JointState _jointGoal
    (send _jointGoal :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; sensor_msgs/JointState _jointGoal
       (send _jointGoal :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; sensor_msgs/JointState _jointGoal
     (send _jointGoal :deserialize buf ptr-) (incf ptr- (send _jointGoal :serialization-length))
   ;;
   self)
  )

(setf (get katana_msgs::JointMovementGoal :md5sum-) "03f8456b346613dcdf3d0e35b6b1a281")
(setf (get katana_msgs::JointMovementGoal :datatype-) "katana_msgs/JointMovementGoal")
(setf (get katana_msgs::JointMovementGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
sensor_msgs/JointState jointGoal

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

")



(provide :katana_msgs/JointMovementGoal "03f8456b346613dcdf3d0e35b6b1a281")


